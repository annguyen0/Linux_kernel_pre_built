#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# Description: Build Kernel using GitHub Actions
# Change from P3TERX
#

name: Linux Kernel Latest

on:
  workflow_dispatch:
  schedule:
    #- cron: "36 20 * * 2,6"
    - cron: "36 20 * * *"
   # inputs:
    #  ssh:
     #   description: 'SSH connection to Actions'
      #  required: false
       # default: 'false'

env:
  UPLOAD_DIR: false
  UPLOAD_RELEASE: true
  TZ: Asia/Ho_Chi_Minh

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E sed -i~orig -e 's/# deb-src/deb-src/' /etc/apt/sources.list   
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential bzip2 gawk gettext git patch unzip htop wget curl -y
        sudo -E apt-get -qq build-dep linux -y
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo mkdir -p /workdir/upload
        sudo chown $USER:$GROUPS /workdir
        sudo chown $USER:$GROUPS /workdir/upload
    - name: Check for updates
      id: check
      run: |
        github_ver=$(curl -s https://api.github.com/repos/anphucnguyen/Linux_kernel_pre_built/tags | grep "name"| head -n 1 | awk -F '"' '{print$4}')
        kernel_ver=$(curl -s https://www.kernel.org/ | grep "<td><strong>" | head -n 1 | awk -F '>' '{print$3}' | awk -F '<' '{print$1}')
        echo "github_ver=" $github_ver
        echo "kernel_ver=" $kernel_ver
        if [[ $github_ver == *"$kernel_ver"* ]]; then
            echo "::set-output name=status::fail"
        else
           echo "::set-output name=status::success"
        fi
    - name: Get source code
      id: code
      working-directory: /workdir
       if: steps.check.outputs.status == 'success'
      run: |
        df -hT $PWD
        kernel_file=$(curl -s https://www.kernel.org/ | grep "torvalds" | head -n 1 | awk -F '"' '{print$2}')
        kernel_ver=$(curl -s https://www.kernel.org/ | grep "<td><strong>" | head -n 1 | awk -F '>' '{print$3}' | awk -F '<' '{print$1}')
        wget -O kernel.tar.gz $kernel_file
        tar -xvf kernel.tar.gz -C /workdir && cd /workdir/linux-$kernel_ver
        echo "::set-output name=status::success"
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Compile the kernel
      id: compile
       if: steps.code.outputs.status == 'success'
      working-directory: /workdir
      run: |
        kernel_ver=$(curl -s https://www.kernel.org/ | grep "<td><strong>" | head -n 1 | awk -F '>' '{print$3}' | awk -F '<' '{print$1}')
        cd linux-$kernel_ver
        wget -O .config https://raw.githubusercontent.com/anphucnguyen/Linux_kernel_pre_built/main/Build_config
        sed -ri '/CONFIG_SYSTEM_TRUSTED_KEYS/s/=.+/=""/g' .config && scripts/config --disable MODULE_SIG && scripts/config --disable DEBUG_INFO
        echo -e "$(nproc) thread compile"
        sudo time make -j$(nproc) deb-pkg
        cd /workdir && mv *.deb /workdir/upload
        echo "::set-output name=status::success"
        echo "FILE_DATE=${kernel_ver}" >> $GITHUB_ENV   
    - name: Check space usage
      if: (!cancelled()) && steps.compile.outputs.status == 'success'
      run: df -hT

    - name: Upload
      uses: actions/upload-artifact@main
       if: steps.compile.outputs.status == 'success' && env.UPLOAD_DIR == 'true'
      with:
        name: ${{ env.FILE_DATE }}
        path: /workdir/upload

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        kernel_ver=$(curl -s https://www.kernel.org/ | grep "<td><strong>" | head -n 1 | awk -F '>' '{print$3}' | awk -F '<' '{print$1}')
        echo "::set-output name=release_tag::${kernel_ver})"
        touch release.txt
        echo "::set-output name=status::success"
    - name: Upload kernel to release
      uses: softprops/action-gh-release@v1
       if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: /workdir/upload/*
